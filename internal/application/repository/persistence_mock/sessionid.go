// Code generated by MockGen. DO NOT EDIT.
// Source: sessionid.go
//
// Generated by this command:
//
//	mockgen -package persistencemock -destination=./persistence_mock/sessionid.go -source=sessionid.go SessionID
//

// Package persistencemock is a generated GoMock package.
package persistencemock

import (
	context "context"
	reflect "reflect"

	model "github.com/tul1/candhis_api/internal/application/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionID is a mock of SessionID interface.
type MockSessionID struct {
	ctrl     *gomock.Controller
	recorder *MockSessionIDMockRecorder
}

// MockSessionIDMockRecorder is the mock recorder for MockSessionID.
type MockSessionIDMockRecorder struct {
	mock *MockSessionID
}

// NewMockSessionID creates a new mock instance.
func NewMockSessionID(ctrl *gomock.Controller) *MockSessionID {
	mock := &MockSessionID{ctrl: ctrl}
	mock.recorder = &MockSessionIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionID) EXPECT() *MockSessionIDMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSessionID) Get(ctx context.Context) (*model.CandhisSessionID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(*model.CandhisSessionID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionIDMockRecorder) Get(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionID)(nil).Get), ctx)
}

// Update mocks base method.
func (m *MockSessionID) Update(ctx context.Context, sessionID *model.CandhisSessionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSessionIDMockRecorder) Update(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionID)(nil).Update), ctx, sessionID)
}
