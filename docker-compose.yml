version: '3.8'

services:
  api:
    image: candhis-api:latest
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - candhis_network

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: candhis_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - candhis_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready"
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    container_name: migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./infra/db/migrations:/migrations
    entrypoint: [
      "migrate", 
      "-path", "/migrations", 
      "-database", "postgres://user:password@postgres:5432/candhis_db?sslmode=disable",
      "up"
    ]
    networks:
      - candhis_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - candhis_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.1.0
    container_name: metricbeat
    user: root
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - ./infra/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch_logs:9200
    networks:
      - logs_network
    depends_on:
      elasticsearch_logs:
        condition: service_healthy

  elasticsearch_logs:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
    container_name: elasticsearch_logs
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9201:9200"
      - "9301:9300"
    volumes:
      - es_logs_data:/usr/share/elasticsearch/data
    networks:
      - logs_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10

  fluentd:
    build:
      context: ./infra/fluentd
      dockerfile: Dockerfile
    container_name: fluentd
    environment:
      FLUENT_ELASTICSEARCH_HOST: elasticsearch_logs
      FLUENT_ELASTICSEARCH_PORT: 9200
    volumes:
      - ./infra/fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - /var/log/journal:/var/log/journal
    networks:
      - logs_network
    depends_on:
      elasticsearch_logs:
        condition: service_healthy

  kibana_logs:
    image: docker.elastic.co/kibana/kibana:8.1.0
    container_name: kibana_logs
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch_logs:9200
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    networks:
      - logs_network
    depends_on:
      elasticsearch_logs:
        condition: service_healthy

  # chrome-headless:
  #   image: justinribeiro/chrome-headless:latest
  #   container_name: chrome-headless
  #   ports:
  #     - "9222:9222"
  #   command: >
  #     --cap-add=SYS_ADMIN
  #     --remote-debugging-address=0.0.0.0
  #     --remote-debugging-port=9222
  #     --no-sandbox
  #     --disable-gpu
  #     --disable-software-rasterizer
  #     --disable-nacl
  #     --disable-setuid-sandbox
  #     --no-zygote
  #     --disable-dev-shm-usage
  #     --disable-perf-monitoring
  #   restart: unless-stopped

volumes:
  postgres_data:
  es_data:
  es_logs_data:

networks:
  candhis_network:
  logs_network: